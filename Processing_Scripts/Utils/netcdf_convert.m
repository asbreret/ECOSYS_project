function [nc_fname] = netcdf_convert(fname)

% Read CSV file into a table
T = readtable(fname);

% Extract column headers
headers = T.Properties.VariableNames;

% Extract time_start
time_start = datetime(num2str(table2array(T(:, 1))), 'InputFormat', 'yyyyMMddHHmm');

% Convert time_start to POSIX time
posix_time = posixtime(time_start);

% Create a new netCDF file
nc_fname = strrep(fname, '.csv', '.nc');

if exist(nc_fname, 'file')
    delete(nc_fname);
end

% Define dimensions
nccreate(nc_fname, 'time', 'Dimensions', {'time', numel(time_start)});

% Add attributes to the time variable
ncwriteatt(nc_fname, 'time', 'long_name', 'time');
ncwriteatt(nc_fname, 'time', 'units', 'seconds since 1970-01-01 00:00:00');

% Write time data
ncwrite(nc_fname, 'time', posix_time);




for i = 3:length(headers)
    data = T.(headers{i});
    data(data==-9999) = nan;
    T.(headers{i}) = data;

    % Define variables in netCDF
    nccreate(nc_fname, headers{i}, 'Dimensions', {'time', numel(data)});

    % Extract base variable name and its qualifier description
    [baseVarName, qualifierDescription] = stripQualifiers(headers{i});

    % Extract metadata for the base variable using getVarInfo function
    [description, short_name, long_name, units] = getVarInfo(baseVarName);

    % Append the qualifier description to the long_name
    long_name = [long_name, qualifierDescription];

    % Add attributes to the variables
    ncwriteatt(nc_fname, headers{i}, 'short_name', short_name);
    ncwriteatt(nc_fname, headers{i}, 'long_name', long_name);
    ncwriteatt(nc_fname, headers{i}, 'units', units);
    ncwriteatt(nc_fname, headers{i}, 'description', description);

    % Write data to netCDF
    ncwrite(nc_fname, headers{i}, data);
end


end

function [baseVar, qualifierDescription] = stripQualifiers(varName)
    qualifiers = {'_PI', '_QC', '_F', '_IU', '_MDS', '_ERA', '_JSB','_CORR','_REF','_USTAR50','_JOINTUNC', '_VUT', '_CUT','_MEAN','_SE'};
    descriptions = {' (Provided by PI/tower team)',
                    ' (Quality control flag)',
                    ' (Gap-filled variable)',
                    ' (Instrument units)',
                    ' (Met gap filling)',
                    ' (From the ERA interim product)',
                    ' (Land model)',
                    ' (Corrected)',
                    ' (Reference)',
                    ' (Based on Median USTAR threshold)',
                    ' (Joint Uncertainty)',
                    ' (Variable USTAR threshold)',
                    ' (Constant USTAR threshold)',
                    ' (Averaged)',
                    ' (Standard Error)'};

    baseVar = varName;
    qualifierDescription = '';

    % Check for the three-index positional qualifier
    match = regexp(baseVar, '_\d_\d_\d$', 'match');
    if ~isempty(match)
        hvr = strsplit(match{1}, '_');
        h = str2double(hvr{2});
        v = str2double(hvr{3});
        r = str2double(hvr{4});
        qualifierDescription = [qualifierDescription, sprintf(' (Horizontal position: %d, Vertical position: %d, Replicate: %d)', h, v, r)];
        baseVar = strrep(baseVar, match{1}, '');
    end

    % Check for single numeric qualifiers like _75 or _2
    numericMatch = regexp(baseVar, '_\d+$', 'match');
    if ~isempty(numericMatch)
        qualifierDescription = [qualifierDescription, ' (number)'];
        baseVar = strrep(baseVar, numericMatch{1}, '');
    end

    for q = 1:length(qualifiers)
        if contains(baseVar, qualifiers{q})
            qualifierDescription = [qualifierDescription, descriptions{q}];
            baseVar = strrep(baseVar, qualifiers{q}, '');
        end
    end
end



function [description, short_name, long_name, units] = getVarInfo(varName)

% Define a struct array containing all the variable information
varInfo = struct();

% TIMEKEEPING
varInfo.TIMESTAMP_START = struct('description', 'ISO timestamp start of averaging period', ...
    'short_name', 'TIMESTAMP_START', ...
    'long_name', 'ISO timestamp start of averaging period', ...
    'units', 'YYYYMMDDHHMM');

varInfo.TIMESTAMP_END = struct('description', 'ISO timestamp end of averaging period', ...
    'short_name', 'TIMESTAMP_END', ...
    'long_name', 'ISO timestamp end of averaging period', ...
    'units', 'YYYYMMDDHHMM');

% AQUATIC
varInfo.COND_WATER = struct('description', 'Conductivity (i.e., electrical conductivity) of water', ...
    'short_name', 'COND_WATER', ...
    'long_name', 'Conductivity of water', ...
    'units', 'µS cm-1');

varInfo.DO = struct('description', 'Dissolved oxygen in water', ...
    'short_name', 'DO', ...
    'long_name', 'Dissolved oxygen in water', ...
    'units', 'µmol L-1');

varInfo.PCH4 = struct('description', 'Dissolved methane (CH4) in water', ...
    'short_name', 'PCH4', ...
    'long_name', 'Dissolved methane concentration in water', ...
    'units', 'nmolCH4 mol-1');

varInfo.PCO2 = struct('description', 'Dissolved carbon dioxide (CO2) in water', ...
    'short_name', 'PCO2', ...
    'long_name', 'Dissolved carbon dioxide concentration in water', ...
    'units', 'µmolCO2 mol-1');

varInfo.PN2O = struct('description', 'Dissolved nitrous oxide (N2O) in water', ...
    'short_name', 'PN2O', ...
    'long_name', 'Dissolved nitrous oxide concentration in water', ...
    'units', 'nmolN2O mol-1');

varInfo.PPFD_UW_IN = struct('description', 'Photosynthetic photon flux density, underwater, incoming', ...
    'short_name', 'PPFD_UW_IN', ...
    'long_name', 'Photosynthetic photon flux density, underwater, incoming', ...
    'units', 'µmolPhotons m-2 s-1');

varInfo.TW = struct('description', 'Water temperature', ...
    'short_name', 'TW', ...
    'long_name', 'Water temperature', ...
    'units', 'deg C');



% Biological

varInfo.DBH = struct('description', 'Diameter of tree measured at breast height (1.3m) with continuous dendrometers', ...
    'short_name', 'DBH', ...
    'long_name', 'Diameter at breast height', ...
    'units', 'cm');

varInfo.LEAF_WET = struct('description', 'Leaf wetness, range 0-100', ...
    'short_name', 'LEAF_WET', ...
    'long_name', 'Leaf wetness percentage', ...
    'units', '%');

varInfo.SAP_DT = struct('description', 'Difference of probes temperature for sapflow measurements', ...
    'short_name', 'SAP_DT', ...
    'long_name', 'Temperature difference for sapflow probes', ...
    'units', 'deg C');

varInfo.SAP_FLOW = struct('description', 'Sap flow', ...
    'short_name', 'SAP_FLOW', ...
    'long_name', 'Sap flow rate', ...
    'units', 'mmolH2O m-2 s-1');

varInfo.T_BOLE = struct('description', 'Bole temperature', ...
    'short_name', 'T_BOLE', ...
    'long_name', 'Bole temperature', ...
    'units', 'deg C');

varInfo.T_CANOPY = struct('description', 'Temperature of the canopy and/or surface underneath the sensor', ...
    'short_name', 'T_CANOPY', ...
    'long_name', 'Canopy/surface temperature', ...
    'units', 'deg C');




% Footprint

varInfo.FETCH_70 = struct('description', 'Distance at which cross-wind integrated footprint cumulative probability is 70%', ...
    'short_name', 'FETCH_70', ...
    'long_name', 'Distance for 70% cumulative footprint probability', ...
    'units', 'm');

varInfo.FETCH_80 = struct('description', 'Distance at which cross-wind integrated footprint cumulative probability is 80%', ...
    'short_name', 'FETCH_80', ...
    'long_name', 'Distance for 80% cumulative footprint probability', ...
    'units', 'm');

varInfo.FETCH_90 = struct('description', 'Distance at which cross-wind integrated footprint cumulative probability is 90%', ...
    'short_name', 'FETCH_90', ...
    'long_name', 'Distance for 90% cumulative footprint probability', ...
    'units', 'm');

varInfo.FETCH_FILTER = struct('description', 'Footprint quality flag (i.e., 0, 1): 0 and 1 indicate data measured when wind coming from direction that should be discarded and kept, respectively', ...
    'short_name', 'FETCH_FILTER', ...
    'long_name', 'Footprint quality flag', ...
    'units', 'nondimensional');

varInfo.FETCH_MAX = struct('description', 'Distance at which footprint contribution is maximum', ...
    'short_name', 'FETCH_MAX', ...
    'long_name', 'Maximum footprint contribution distance', ...
    'units', 'm');



% Gases



varInfo.CH4 = struct('description', 'Methane (CH4) mole fraction in wet air', ...
    'short_name', 'CH4', ...
    'long_name', 'Methane mole fraction in wet air', ...
    'units', 'nmolCH4 mol-1');

varInfo.CH4_MIXING_RATIO = struct('description', 'Methane (CH4) in mole fraction of dry air', ...
    'short_name', 'CH4_MIXING_RATIO', ...
    'long_name', 'Methane mole fraction in dry air', ...
    'units', 'nmolCH4 mol-1');

varInfo.CO = struct('description', 'Carbon Monoxide (CO) mole fraction in wet air', ...
    'short_name', 'CO', ...
    'long_name', 'Carbon Monoxide mole fraction in wet air', ...
    'units', 'nmolCO mol-1');

varInfo.CO2 = struct('description', 'Carbon Dioxide (CO2) mole fraction in wet air', ...
    'short_name', 'CO2', ...
    'long_name', 'Carbon Dioxide mole fraction in wet air', ...
    'units', 'µmolCO2 mol-1');

varInfo.CO2_MIXING_RATIO = struct('description', 'Carbon Dioxide (CO2) in mole fraction of dry air', ...
    'short_name', 'CO2_MIXING_RATIO', ...
    'long_name', 'Carbon Dioxide mole fraction in dry air', ...
    'units', 'µmolCO2 mol-1');

varInfo.CO2_SIGMA = struct('description', 'Standard deviation of carbon dioxide mole fraction in wet air', ...
    'short_name', 'CO2_SIGMA', ...
    'long_name', 'Standard deviation of CO2 mole fraction in wet air', ...
    'units', 'µmolCO2 mol-1');

varInfo.CO2C13 = struct('description', 'Stable isotopic composition of CO2 - C13 (i.e., d13C of CO2)', ...
    'short_name', 'CO2C13', ...
    'long_name', 'd13C of CO2', ...
    'units', '‰ (permil)');

varInfo.FC = struct('description', 'Carbon Dioxide (CO2) turbulent flux (no storage correction)', ...
    'short_name', 'FC', ...
    'long_name', 'CO2 turbulent flux without storage correction', ...
    'units', 'µmolCO2 m-2 s-1');

varInfo.FCH4 = struct('description', 'Methane (CH4) turbulent flux (no storage correction)', ...
    'short_name', 'FCH4', ...
    'long_name', 'CH4 turbulent flux without storage correction', ...
    'units', 'nmolCH4 m-2 s-1');

varInfo.FN2O = struct('description', 'Nitrous oxide (N2O) turbulent flux (no storage correction)', ...
    'short_name', 'FN2O', ...
    'long_name', 'N2O turbulent flux without storage correction', ...
    'units', 'nmolN2O m-2 s-1');

varInfo.FNO = struct('description', 'Nitric oxide (NO) turbulent flux (no storage correction)', ...
    'short_name', 'FNO', ...
    'long_name', 'NO turbulent flux without storage correction', ...
    'units', 'nmolNO m-2 s-1');

varInfo.FNO2 = struct('description', 'Nitrogen dioxide (NO2) turbulent flux (no storage correction)', ...
    'short_name', 'FNO2', ...
    'long_name', 'NO2 turbulent flux without storage correction', ...
    'units', 'nmolNO2 m-2 s-1');

varInfo.FO3 = struct('description', 'Ozone (O3) turbulent flux (no storage correction)', ...
    'short_name', 'FO3', ...
    'long_name', 'O3 turbulent flux without storage correction', ...
    'units', 'nmolO3 m-2 s-1');

varInfo.H2O = struct('description', 'Water (H2O) vapor in mole fraction of wet air', ...
    'short_name', 'H2O', ...
    'long_name', 'H2O vapor mole fraction in wet air', ...
    'units', 'mmolH2O mol-1');

varInfo.H2O_MIXING_RATIO = struct('description', 'Water (H2O) vapor in mole fraction of dry air', ...
    'short_name', 'H2O_MIXING_RATIO', ...
    'long_name', 'H2O vapor mole fraction in dry air', ...
    'units', 'mmolH2O mol-1');

varInfo.H2O_SIGMA = struct('description', 'Standard deviation of water vapor mole fraction', ...
    'short_name', 'H2O_SIGMA', ...
    'long_name', 'Standard deviation of H2O vapor mole fraction', ...
    'units', 'mmolH2O mol-1');

varInfo.N2O = struct('description', 'Nitrous Oxide (N2O) mole fraction in wet air', ...
    'short_name', 'N2O', ...
    'long_name', 'N2O mole fraction in wet air', ...
    'units', 'nmolN2O mol-1');

varInfo.N2O_MIXING_RATIO = struct('description', 'Nitrous Oxide (N2O) in mole fraction of dry air', ...
    'short_name', 'N2O_MIXING_RATIO', ...
    'long_name', 'N2O mole fraction in dry air', ...
    'units', 'nmolN2O mol-1');

varInfo.NO = struct('description', 'Nitric oxide (NO) mole fraction in wet air', ...
    'short_name', 'NO', ...
    'long_name', 'NO mole fraction in wet air', ...
    'units', 'nmolNO mol-1');

varInfo.NO2 = struct('description', 'Nitrogen dioxide (NO2) mole fraction in wet air', ...
    'short_name', 'NO2', ...
    'long_name', 'NO2 mole fraction in wet air', ...
    'units', 'nmolNO2 mol-1');

varInfo.O3 = struct('description', 'Ozone (O3) mole fraction in wet air', ...
    'short_name', 'O3', ...
    'long_name', 'O3 mole fraction in wet air', ...
    'units', 'nmolO3 mol-1');

varInfo.SC = struct('description', 'Carbon Dioxide (CO2) storage flux', ...
    'short_name', 'SC', ...
    'long_name', 'CO2 storage flux', ...
    'units', 'µmolCO2 m-2 s-1');

varInfo.SCH4 = struct('description', 'Methane (CH4) storage flux', ...
    'short_name', 'SCH4', ...
    'long_name', 'CH4 storage flux', ...
    'units', 'nmolCH4 m-2 s-1');

varInfo.SN2O = struct('description', 'Nitrous oxide (N2O) storage flux', ...
    'short_name', 'SN2O', ...
    'long_name', 'N2O storage flux', ...
    'units', 'nmolN2O m-2 s-1');

varInfo.SNO = struct('description', 'Nitric oxide (NO) storage flux', ...
    'short_name', 'SNO', ...
    'long_name', 'NO storage flux', ...
    'units', 'nmolNO m-2 s-1');

varInfo.SNO2 = struct('description', 'Nitrogen dioxide (NO2) storage flux', ...
    'short_name', 'SNO2', ...
    'long_name', 'NO2 storage flux', ...
    'units', 'nmolNO2 m-2 s-1');

varInfo.SO2 = struct('description', 'Sulfur Dioxide (SO2) mole fraction in wet air', ...
    'short_name', 'SO2', ...
    'long_name', 'SO2 mole fraction in wet air', ...
    'units', 'nmolSO2 mol-1');

varInfo.SO3 = struct('description', 'Ozone (O3) storage flux', ...
    'short_name', 'SO3', ...
    'long_name', 'O3 storage flux', ...
    'units', 'nmolO3 m-2 s-1');


% Heat

varInfo.FH2O = struct('description', 'Water vapor (H2O) turbulent flux (no storage correction)', ...
    'short_name', 'FH2O', ...
    'long_name', 'H2O turbulent flux without storage correction', ...
    'units', 'mmolH2O m-2 s-1');

varInfo.G = struct('description', 'Soil heat flux', ...
    'short_name', 'G', ...
    'long_name', 'Soil heat flux', ...
    'units', 'W m-2');

varInfo.H = struct('description', 'Sensible heat turbulent flux (no storage correction)', ...
    'short_name', 'H', ...
    'long_name', 'Sensible heat turbulent flux without storage correction', ...
    'units', 'W m-2');

varInfo.LE = struct('description', 'Latent heat turbulent flux (no storage correction)', ...
    'short_name', 'LE', ...
    'long_name', 'Latent heat turbulent flux without storage correction', ...
    'units', 'W m-2');

varInfo.SB = struct('description', 'Heat storage flux in biomass', ...
    'short_name', 'SB', ...
    'long_name', 'Heat storage flux in biomass', ...
    'units', 'W m-2');

varInfo.SG = struct('description', 'Heat storage flux in the soil above the soil heat fluxes measurement', ...
    'short_name', 'SG', ...
    'long_name', 'Heat storage flux in soil above measurement', ...
    'units', 'W m-2');

varInfo.SH = struct('description', 'Sensible heat (H) storage flux', ...
    'short_name', 'SH', ...
    'long_name', 'Sensible heat storage flux', ...
    'units', 'W m-2');

varInfo.SLE = struct('description', 'Latent heat (LE) storage flux', ...
    'short_name', 'SLE', ...
    'long_name', 'Latent heat storage flux', ...
    'units', 'W m-2');



% Met_atm

varInfo.PA = struct('description', 'Atmospheric pressure', ...
    'short_name', 'PA', ...
    'long_name', 'Atmospheric pressure', ...
    'units', 'kPa');

varInfo.PBLH = struct('description', 'Planetary boundary layer height', ...
    'short_name', 'PBLH', ...
    'long_name', 'Planetary boundary layer height', ...
    'units', 'm');

varInfo.RH = struct('description', 'Relative humidity, range 0-100', ...
    'short_name', 'RH', ...
    'long_name', 'Relative humidity', ...
    'units', '%');

varInfo.T_SONIC = struct('description', 'Sonic temperature', ...
    'short_name', 'T_SONIC', ...
    'long_name', 'Sonic temperature', ...
    'units', 'deg C');

varInfo.T_SONIC_SIGMA = struct('description', 'Standard deviation of sonic temperature', ...
    'short_name', 'T_SONIC_SIGMA', ...
    'long_name', 'Standard deviation of sonic temperature', ...
    'units', 'deg C');

varInfo.TA = struct('description', 'Air temperature', ...
    'short_name', 'TA', ...
    'long_name', 'Air temperature', ...
    'units', 'deg C');

varInfo.VPD = struct('description', 'Vapor Pressure Deficit', ...
    'short_name', 'VPD', ...
    'long_name', 'Vapor Pressure Deficit', ...
    'units', 'hPa');



% Met precip

varInfo.D_SNOW = struct('description', 'Snow depth', ...
    'short_name', 'D_SNOW', ...
    'long_name', 'Snow depth', ...
    'units', 'cm');

varInfo.P = struct('description', 'Precipitation', ...
    'short_name', 'P', ...
    'long_name', 'Precipitation', ...
    'units', 'mm');

varInfo.P_RAIN = struct('description', 'Rainfall', ...
    'short_name', 'P_RAIN', ...
    'long_name', 'Rainfall', ...
    'units', 'mm');

varInfo.P_SNOW = struct('description', 'Snowfall', ...
    'short_name', 'P_SNOW', ...
    'long_name', 'Snowfall', ...
    'units', 'mm');

varInfo.RUNOFF = struct('description', 'Run off', ...
    'short_name', 'RUNOFF', ...
    'long_name', 'Run off', ...
    'units', 'mm');

varInfo.STEMFLOW = struct('description', 'Excess precipitation that drains from outlying branches and leaves and is channeled through the stems to the ground', ...
    'short_name', 'STEMFLOW', ...
    'long_name', 'Stemflow', ...
    'units', 'mm');

varInfo.THROUGHFALL = struct('description', 'Excess precipitation that passes directly through a canopy or drips from wet leaves to the ground', ...
    'short_name', 'THROUGHFALL', ...
    'long_name', 'Throughfall', ...
    'units', 'mm');



% Met_rad


varInfo.ALB = struct('description', 'Albedo', ...
    'short_name', 'ALB', ...
    'long_name', 'Albedo', ...
    'units', '%');

varInfo.APAR = struct('description', 'Absorbed PAR', ...
    'short_name', 'APAR', ...
    'long_name', 'Absorbed Photosynthetically Active Radiation', ...
    'units', 'µmolPhoton m-2 s-1');

varInfo.EVI = struct('description', 'Enhanced Vegetation Index', ...
    'short_name', 'EVI', ...
    'long_name', 'Enhanced Vegetation Index', ...
    'units', 'nondimensional');

varInfo.FAPAR = struct('description', 'Fraction of absorbed PAR', ...
    'short_name', 'FAPAR', ...
    'long_name', 'Fraction of absorbed Photosynthetically Active Radiation', ...
    'units', '%');

varInfo.FIPAR = struct('description', 'Fraction of intercepted PAR', ...
    'short_name', 'FIPAR', ...
    'long_name', 'Fraction of intercepted Photosynthetically Active Radiation', ...
    'units', '%');

varInfo.LW_BC_IN = struct('description', 'Longwave radiation, below canopy incoming', ...
    'short_name', 'LW_BC_IN', ...
    'long_name', 'Longwave radiation, below the canopy, incoming', ...
    'units', 'W m-2');

varInfo.LW_BC_OUT = struct('description', 'Longwave radiation, below canopy outgoing', ...
    'short_name', 'LW_BC_OUT', ...
    'long_name', 'Longwave radiation, below the canopy, outgoing', ...
    'units', 'W m-2');

varInfo.LW_IN = struct('description', 'Longwave radiation, incoming', ...
    'short_name', 'LW_IN', ...
    'long_name', 'Longwave radiation, incoming', ...
    'units', 'W m-2');

varInfo.LW_OUT = struct('description', 'Longwave radiation, outgoing', ...
    'short_name', 'LW_OUT', ...
    'long_name', 'Longwave radiation, outgoing', ...
    'units', 'W m-2');

varInfo.MCRI = struct('description', 'Carotenoid Reflectance Index (Gitelson et al., 2002)', ...
    'short_name', 'MCRI', ...
    'long_name', 'Carotenoid Reflectance Index', ...
    'units', 'nondimensional');

varInfo.MTCI = struct('description', 'Meris Terrestrial Chlorophyll Index (Dash and Curran, 2004)', ...
    'short_name', 'MTCI', ...
    'long_name', 'Meris Terrestrial Chlorophyll Index', ...
    'units', 'nondimensional');

varInfo.NDVI = struct('description', 'Normalized Difference Vegetation Index', ...
    'short_name', 'NDVI', ...
    'long_name', 'Normalized Difference Vegetation Index', ...
    'units', 'nondimensional');

varInfo.NETRAD = struct('description', 'Net radiation', ...
    'short_name', 'NETRAD', ...
    'long_name', 'Net radiation', ...
    'units', 'W m-2');

varInfo.NIRV = struct('description', 'Near Infrared Vegetation Index (Badgley et al., 2017)', ...
    'short_name', 'NIRV', ...
    'long_name', 'Near Infrared Vegetation Index', ...
    'units', 'W m-2 sr-1 nm-1');

varInfo.PPFD_BC_IN = struct('description', 'Photosynthetic photon flux density, below canopy incoming', ...
    'short_name', 'PPFD_BC_IN', ...
    'long_name', 'Photosynthetic photon flux density, below the canopy, incoming', ...
    'units', 'µmolPhoton m-2 s-1');

varInfo.PPFD_BC_OUT = struct('description', 'Photosynthetic photon flux density, below canopy outgoing', ...
    'short_name', 'PPFD_BC_OUT', ...
    'long_name', 'Photosynthetic photon flux density, below canopy outgoing', ...
    'units', 'µmolPhoton m-2 s-1');

varInfo.PPFD_DIF = struct('description', 'Photosynthetic photon flux density, diffuse incoming', ...
    'short_name', 'PPFD_DIF', ...
    'long_name', 'Photosynthetic photon flux density, diffuse incoming', ...
    'units', 'µmolPhoton m-2 s-1');

varInfo.PPFD_DIR = struct('description', 'Photosynthetic photon flux density, direct incoming', ...
    'short_name', 'PPFD_DIR', ...
    'long_name', 'Photosynthetic photon flux density, direct incoming', ...
    'units', 'µmolPhoton m-2 s-1');

varInfo.PPFD_IN = struct('description', 'Photosynthetic photon flux density, incoming', ...
    'short_name', 'PPFD_IN', ...
    'long_name', 'Photosynthetic photon flux density, incoming', ...
    'units', 'µmolPhoton m-2 s-1');

varInfo.PPFD_OUT = struct('description', 'Photosynthetic photon flux density, outgoing', ...
    'short_name', 'PPFD_OUT', ...
    'long_name', 'Photosynthetic photon flux density, outgoing', ...
    'units', 'µmolPhoton m-2 s-1');

varInfo.PRI = struct('description', 'Photochemical Reflectance Index', ...
    'short_name', 'PRI', ...
    'long_name', 'Photochemical Reflectance Index', ...
    'units', 'nondimensional');

varInfo.R_UVA = struct('description', 'UVA radiation, incoming', ...
    'short_name', 'R_UVA', ...
    'long_name', 'UVA radiation, incoming', ...
    'units', 'W m-2');

varInfo.R_UVB = struct('description', 'UVB radiation, incoming', ...
    'short_name', 'R_UVB', ...
    'long_name', 'UVB radiation, incoming', ...
    'units', 'W m-2');

varInfo.REDCI = struct('description', 'Red Edge Chlorophyll Index', ...
    'short_name', 'REDCI', ...
    'long_name', 'Red Edge Chlorophyll Index', ...
    'units', 'nondimensional');

varInfo.REP = struct('description', 'Red Edge Position', ...
    'short_name', 'REP', ...
    'long_name', 'Red Edge Position', ...
    'units', 'nm');

varInfo.SPEC_NIR_IN = struct('description', 'Radiation (near infra-red band), incoming (hemispherical)', ...
    'short_name', 'SPEC_NIR_IN', ...
    'long_name', 'Radiation (near infra-red band), incoming (hemispherical)', ...
    'units', 'W m-2 nm-1');

varInfo.SPEC_NIR_OUT = struct('description', 'Radiation (near infra-red band), outgoing', ...
    'short_name', 'SPEC_NIR_OUT', ...
    'long_name', 'Radiation (near infra-red band), outgoing', ...
    'units', 'W m-2 sr-1 nm-1');

varInfo.SPEC_NIR_REFL = struct('description', 'Reflectance (near infra-red band)', ...
    'short_name', 'SPEC_NIR_REFL', ...
    'long_name', 'Reflectance (near infra-red band)', ...
    'units', 'nondimensional');

varInfo.SPEC_PRI_REF_IN = struct('description', 'Radiation for PRI reference band (e.g., 570 nm), incoming (hemispherical)', ...
    'short_name', 'SPEC_PRI_REF_IN', ...
    'long_name', 'Radiation for PRI reference band (e.g., 570 nm), incoming (hemispherical)', ...
    'units', 'W m-2 nm-1');

varInfo.SPEC_PRI_REF_OUT = struct('description', 'Radiation for PRI reference band (e.g., 570 nm), outgoing', ...
    'short_name', 'SPEC_PRI_REF_OUT', ...
    'long_name', 'Radiation for PRI reference band (e.g., 570 nm), outgoing', ...
    'units', 'W m-2 sr-1 nm-1');

varInfo.SPEC_PRI_REF_REFL = struct('description', 'Reflectance for PRI reference band (e.g., 570 nm)', ...
    'short_name', 'SPEC_PRI_REF_REFL', ...
    'long_name', 'Reflectance for PRI reference band (e.g., 570 nm)', ...
    'units', 'nondimensional');

varInfo.SPEC_PRI_TGT_IN = struct('description', 'Radiation for PRI target band (e.g., 531 nm), incoming (hemispherical)', ...
    'short_name', 'SPEC_PRI_TGT_IN', ...
    'long_name', 'Radiation for PRI target band (e.g., 531 nm), incoming (hemispherical)', ...
    'units', 'W m-2 nm-1');

varInfo.SPEC_PRI_TGT_OUT = struct('description', 'Radiation for PRI target band (e.g., 531 nm), outgoing', ...
    'short_name', 'SPEC_PRI_TGT_OUT', ...
    'long_name', 'Radiation for PRI target band (e.g., 531 nm), outgoing', ...
    'units', 'W m-2 sr-1 nm-1');

varInfo.SPEC_PRI_TGT_REFL = struct('description', 'Reflectance for PRI target band (e.g., 531 nm)', ...
    'short_name', 'SPEC_PRI_TGT_REFL', ...
    'long_name', 'Reflectance for PRI target band (e.g., 531 nm)', ...
    'units', 'nondimensional');

varInfo.SPEC_RED_IN = struct('description', 'Radiation (red band), incoming (hemispherical)', ...
    'short_name', 'SPEC_RED_IN', ...
    'long_name', 'Radiation (red band), incoming (hemispherical)', ...
    'units', 'W m-2 nm-1');

varInfo.SPEC_RED_OUT = struct('description', 'Radiation (red band), outgoing', ...
    'short_name', 'SPEC_RED_OUT', ...
    'long_name', 'Radiation (red band), outgoing', ...
    'units', 'W m-2 sr-1 nm-1');

varInfo.SPEC_RED_REFL = struct('description', 'Reflectance (red band)', ...
    'short_name', 'SPEC_RED_REFL', ...
    'long_name', 'Reflectance (red band)', ...
    'units', 'nondimensional');

varInfo.SR = struct('description', 'Simple Ratio', ...
    'short_name', 'SR', ...
    'long_name', 'Simple Ratio', ...
    'units', 'nondimensional');

varInfo.SW_BC_IN = struct('description', 'Shortwave radiation, below canopy incoming', ...
    'short_name', 'SW_BC_IN', ...
    'long_name', 'Shortwave radiation, below canopy incoming', ...
    'units', 'W m-2');

varInfo.SW_BC_OUT = struct('description', 'Shortwave radiation, below canopy outgoing', ...
    'short_name', 'SW_BC_OUT', ...
    'long_name', 'Shortwave radiation, below canopy outgoing', ...
    'units', 'W m-2');

varInfo.SW_DIF = struct('description', 'Shortwave radiation, diffuse incoming', ...
    'short_name', 'SW_DIF', ...
    'long_name', 'Shortwave radiation, diffuse incoming', ...
    'units', 'W m-2');

varInfo.SW_DIR = struct('description', 'Shortwave radiation, direct incoming', ...
    'short_name', 'SW_DIR', ...
    'long_name', 'Shortwave radiation, direct incoming', ...
    'units', 'W m-2');

varInfo.SW_IN = struct('description', 'Shortwave radiation, incoming', ...
    'short_name', 'SW_IN', ...
    'long_name', 'Shortwave radiation, incoming', ...
    'units', 'W m-2');

varInfo.SW_OUT = struct('description', 'Shortwave radiation, outgoing', ...
    'short_name', 'SW_OUT', ...
    'long_name', 'Shortwave radiation, outgoing', ...
    'units', 'W m-2');

varInfo.TCARI = struct('description', 'Transformed Chlorophyll Absorption in Reflectance Index', ...
    'short_name', 'TCARI', ...
    'long_name', 'Transformed Chlorophyll Absorption in Reflectance Index', ...
    'units', 'nondimensional');


% MET_SOIL variables

varInfo.SWC = struct('description', 'Soil water content (volumetric), range 0-100', ...
    'short_name', 'SWC', ...
    'long_name', 'Soil water content (volumetric)', ...
    'units', '%');

varInfo.SWP = struct('description', 'Soil water potential', ...
    'short_name', 'SWP', ...
    'long_name', 'Soil water potential', ...
    'units', 'kPa');

varInfo.TS = struct('description', 'Soil temperature', ...
    'short_name', 'TS', ...
    'long_name', 'Soil temperature', ...
    'units', 'deg C');

varInfo.TSN = struct('description', 'Snow temperature', ...
    'short_name', 'TSN', ...
    'long_name', 'Snow temperature', ...
    'units', 'deg C');

varInfo.WTD = struct('description', 'Water table depth', ...
    'short_name', 'WTD', ...
    'long_name', 'Water table depth', ...
    'units', 'm');

% MET_WIND variables

varInfo.MO_LENGTH = struct('description', 'Monin-Obukhov length', ...
    'short_name', 'MO_LENGTH', ...
    'long_name', 'Monin-Obukhov length', ...
    'units', 'm');

varInfo.TAU = struct('description', 'Momentum flux', ...
    'short_name', 'TAU', ...
    'long_name', 'Momentum flux', ...
    'units', 'kg m-1 s-2');

varInfo.U_SIGMA = struct('description', 'Standard deviation of velocity fluctuations (towards main-wind direction after coordinates rotation)', ...
    'short_name', 'U_SIGMA', ...
    'long_name', 'Standard deviation of velocity fluctuations (towards main-wind direction after coordinates rotation)', ...
    'units', 'm s-1');

varInfo.USTAR = struct('description', 'Friction velocity', ...
    'short_name', 'USTAR', ...
    'long_name', 'Friction velocity', ...
    'units', 'm s-1');

varInfo.V_SIGMA = struct('description', 'Standard deviation of lateral velocity fluctuations (cross main-wind direction after coordinates rotation)', ...
    'short_name', 'V_SIGMA', ...
    'long_name', 'Standard deviation of lateral velocity fluctuations (cross main-wind direction after coordinates rotation)', ...
    'units', 'm s-1');

varInfo.W_SIGMA = struct('description', 'Standard deviation of vertical velocity fluctuations', ...
    'short_name', 'W_SIGMA', ...
    'long_name', 'Standard deviation of vertical velocity fluctuations', ...
    'units', 'm s-1');

varInfo.WD = struct('description', 'Wind direction', ...
    'short_name', 'WD', ...
    'long_name', 'Wind direction', ...
    'units', 'Decimal degrees');

varInfo.WD_SIGMA = struct('description', 'Standard deviation of wind direction (Yamartino, 1984)', ...
    'short_name', 'WD_SIGMA', ...
    'long_name', 'Standard deviation of wind direction (Yamartino, 1984)', ...
    'units', 'decimal degree');

varInfo.WS = struct('description', 'Wind speed', ...
    'short_name', 'WS', ...
    'long_name', 'Wind speed', ...
    'units', 'm s-1');

varInfo.WS_MAX = struct('description', 'maximum WS in the averaging period', ...
    'short_name', 'WS_MAX', ...
    'long_name', 'maximum Wind speed in the averaging period', ...
    'units', 'm s-1');

varInfo.ZL = struct('description', 'Monin-Obukhov Stability parameter', ...
    'short_name', 'ZL', ...
    'long_name', 'Monin-Obukhov Stability parameter', ...
    'units', 'nondimensional');


% PRODUCTS

varInfo.GPP = struct('description', 'Gross Primary Productivity', ...
    'short_name', 'GPP', ...
    'long_name', 'Gross Primary Productivity', ...
    'units', 'µmolCO2 m-2 s-1');

varInfo.NEE = struct('description', 'Net Ecosystem Exchange', ...
    'short_name', 'NEE', ...
    'long_name', 'Net Ecosystem Exchange', ...
    'units', 'µmolCO2 m-2 s-1');

varInfo.RECO = struct('description', 'Ecosystem Respiration', ...
    'short_name', 'RECO', ...
    'long_name', 'Ecosystem Respiration', ...
    'units', 'µmolCO2 m-2 s-1');

% QC_FLAG

varInfo.FC_SSITC_TEST = struct('description', 'Results of the quality flagging for FC according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'FC_SSITC_TEST', ...
    'long_name', 'Quality flagging for FC based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.FCH4_SSITC_TEST = struct('description', 'Results of the quality flagging for FCH4 according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'FCH4_SSITC_TEST', ...
    'long_name', 'Quality flagging for FCH4 based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.FN2O_SSITC_TEST = struct('description', 'Results of the quality flagging for FN2O according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'FN2O_SSITC_TEST', ...
    'long_name', 'Quality flagging for FN2O based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.FNO_SSITC_TEST = struct('description', 'Results of the quality flagging for FNO according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'FNO_SSITC_TEST', ...
    'long_name', 'Quality flagging for FNO based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.FNO2_SSITC_TEST = struct('description', 'Results of the quality flagging for FNO2 according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'FNO2_SSITC_TEST', ...
    'long_name', 'Quality flagging for FNO2 based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.FO3_SSITC_TEST = struct('description', 'Results of the quality flagging for FO3 according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'FO3_SSITC_TEST', ...
    'long_name', 'Quality flagging for FO3 based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.H_SSITC_TEST = struct('description', 'Results of the quality flagging for H according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'H_SSITC_TEST', ...
    'long_name', 'Quality flagging for H based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.LE_SSITC_TEST = struct('description', 'Results of the quality flagging for LE according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'LE_SSITC_TEST', ...
    'long_name', 'Quality flagging for LE based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');

varInfo.TAU_SSITC_TEST = struct('description', 'Results of the quality flagging for TAU according to Foken et al 2004, based on a combination of Steady State and Integral Turbulence Characteristics tests by Foken and Wichura (1996) (i.e., 0, 1, 2)', ...
    'short_name', 'TAU_SSITC_TEST', ...
    'long_name', 'Quality flagging for TAU based on Steady State and Integral Turbulence Characteristics tests', ...
    'units', 'nondimensional');






% Check if the variable exists in our struct and fetch the corresponding information
if isfield(varInfo, varName)
    description = varInfo.(varName).description;
    short_name = varInfo.(varName).short_name;
    long_name = varInfo.(varName).long_name;
    units = varInfo.(varName).units;
else
    % If variable name does not exist in the struct
    description = 'Unknown';
    short_name = 'Unknown';
    long_name = 'Unknown';
    units = 'Unknown';
end

end
